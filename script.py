import os
import io
import pytz
import pandas as pd
import numpy as np
import seaborn as sns
from matplotlib import pyplot as plt
from dotenv import load_dotenv
from sqlalchemy import create_engine
from datetime import datetime, timedelta



# –ø–µ—Ä–µ–≤–æ–¥–∏–º +0 UTC –≤ +3 UTC
def get_utc_chisinau(date_time: datetime):
    tz = pytz.timezone("Europe/Chisinau")
    date_time = date_time.astimezone(tz)
    return date_time


# —Å–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
def create_message_text(revenue_last_week,
                        expected_revenue_last_week,
                        avg_receipt_last_week,
                        avg_receipt_all_time,
                        clients_number,
                        top_5_cheese_by_revenue,
                        top_5_cheese_by_qty):
    
    text = '<b>–ù–ï–î–ï–õ–¨–ù–ê–Ø –°–í–û–î–ö–ê</b>\n\n'
    
    revenue_difference = ((revenue_last_week - expected_revenue_last_week) * 100 / expected_revenue_last_week).round(2)
    
    text += f'üí∏ –í—ã—Ä—É—á–∫–∞ - <b>{revenue_last_week} —Ä—É–±</b> (–æ—Ç–∫–ª. –æ—Ç —Ä–∞—Å—á–µ—Ç. <b>{revenue_difference}%)</b>\n\n'
    
    avg_receipt_difference = ((avg_receipt_last_week - avg_receipt_all_time) * 100 / avg_receipt_all_time).round(2)
    
    text += f'üßæ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫ - <b>{avg_receipt_last_week} —Ä—É–±</b> (–æ—Ç–∫–ª. –æ—Ç —Å—Ä–µ–¥–Ω–µ–Ω–µ–¥. <b>{avg_receipt_difference}%)</b>\n\n'
    
    text += f'üë§ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ - <b>{clients_number}</b>\n\n'
    
    text += 'ü•á <b>–¢–æ–ø 5 —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –ø—Ä–∏–Ω–µ—Å–µ–Ω–Ω–æ–π –≤—ã—Ä—É—á–∫–µ</b>\n'
    
    for cheese in top_5_cheese_by_revenue.itertuples():
        text += f"{cheese.Index + 1} {cheese.transaction_product_name} {round(cheese.revenue, 2)} —Ä—É–±\n"
        
    text += '\n ü•á <b>–¢–æ–ø 5 —Å—ã—Ä–æ–≤ –ø–æ –ø—Ä–æ–¥–∞–Ω–Ω–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É</b>\n'
    
    for cheese in top_5_cheese_by_qty.itertuples():
        text += f"{cheese.Index + 1} {cheese.transaction_product_name} {round(cheese.product_qty, 3)} –∫–≥\n"
        
    return text


# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å
def df_loading(query, date_column):
    load_dotenv()
    engine = create_engine(os.getenv("DB_LINK"))
    return pd.read_sql(sql=query,
                       con=engine,
                       parse_dates=[date_column])


def df_transformation(sales_data):
    # –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
    sales_data['transaction_datetime'] = sales_data['transaction_datetime'].apply(get_utc_chisinau).dt.normalize()

    # —Å—á–∏—Ç–∞–µ–º –≤—ã—Ä—É—á–∫—É –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏
    sales_data['revenue'] = sales_data['transaction_product_price'] * sales_data['product_qty']

    # –ü—Ä–∏–≤–æ–¥–∏–º —à–µ–≤—Ä –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º—ã
    sales_data.loc[sales_data['transaction_product_name'].str.startswith('–®–µ–≤—Ä'), 'product_unit'] = '–∫–≥'
    sales_data.loc[sales_data['transaction_product_name'].str.startswith('–®–µ–≤—Ä'), 'transaction_product_price'] = np.float64(200.0)
    sales_data.loc[sales_data['transaction_product_name'].str.startswith('–®–µ–≤—Ä'), 'product_qty'] = np.float64(0.200) * sales_data['product_qty']

    return sales_data


def df_last_week(df):
    # —Å—á–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
    one_week_back_time = pd.Timestamp.now(pytz.timezone('Europe/Chisinau')).normalize() - timedelta(days=6)
    return df[(df['transaction_datetime'] >= one_week_back_time)] \
                            .sort_values(by='transaction_datetime', ascending=True)

                      
# –≤—ã–≤–æ–¥–∏–º —Ç–æ–ø 5 —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –ø—Ä–∏–Ω–µ—Å–µ–Ω–Ω–æ–π –≤—ã—Ä—É—á–∫–µ
def calculate_top_5_cheese_by_revenue(last_week_sales_data):
    return last_week_sales_data.groupby(['transaction_product_name'], as_index=False) \
                                                    .revenue \
                                                    .sum() \
                                                    .sort_values(by=['revenue'], ascending=False) \
                                                    .reset_index(drop=True) \
                                                    .head()


def calculate_top_5_cheese_by_qty(last_week_sales_data):
    # –≤—ã–≤–æ–¥–∏–º —Ç–æ–ø 5 —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑–º–µ—Ä—è–µ–º—ã—Ö –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö –ø–æ –ø—Ä–∏–Ω–µ—Å–µ–Ω–Ω–æ–π –ø—Ä–æ–¥–∞–Ω–Ω–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É
    return last_week_sales_data[last_week_sales_data['product_unit'] == '–∫–≥'] \
                                                    .groupby(['transaction_product_name'], as_index=False) \
                                                    .product_qty \
                                                    .sum() \
                                                    .sort_values(by=['product_qty'], ascending=False) \
                                                    .reset_index(drop=True) \
                                                    .head()


# –ø—Ä–∏–≤–æ–¥–∏–º –≤—Ä–µ–º—è –∫ –¥–∞—Ç–µ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –Ω–µ–º—É –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
def reports_transformation(df):
    df = df.sort_values(by=['report_datetime'], ascending=True)
    df['report_datetime'] = df['report_datetime'].apply(get_utc_chisinau) \
                                                                    .dt \
                                                                    .normalize()
    return df


# –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —Å –≤—ã—Ä—É—á–∫–æ–π –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
def revenue_throughout_week(df):
    # –¥–∞–µ–º –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ —Ä—É—Å—Å–∫–∏–µ –∫–æ—Ä–æ—Ç–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
    russian_weekdays = {0: '–ü–Ω', 1: '–í—Ç', 2: '–°—Ä', 3: '–ß—Ç', 4: '–ü—Ç', 5: '–°–±', 6: '–í—Å'}
    
    df['weekday'] = df['report_datetime'].dt.dayofweek.map(russian_weekdays)
    
    # –≥–æ—Ç–æ–≤–∏–º –º–∞—Å–∫–∏ –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –¥–∞–Ω–Ω—ã—Ö
    one_week_back_time = pd.Timestamp.now(pytz.timezone('Europe/Chisinau')).normalize() - timedelta(days=6)
    two_weeks_back_time = pd.Timestamp.now(pytz.timezone('Europe/Chisinau')).normalize() - timedelta(days=13)

    one_week_back_mask = df['report_datetime'] >= one_week_back_time
    two_weeks_back_mask = (df['report_datetime'] >= two_weeks_back_time) & \
                            (df['report_datetime'] < one_week_back_time)
                            
    # –≥–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ —Å–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ 97,5 –∏ 0,025 –∫–≤–∞–Ω—Ç–∏–ª–µ–π –∫–∞–∫ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    iqr_mask = df['report_datetime'] <= one_week_back_time
    iqr = df[iqr_mask].copy().groupby('weekday', observed=False)['report_revenue'].quantile([0.025, 0.975]).unstack()
    iqr.columns = ['q025', 'q975']
    
    last_week_reports_data = df[one_week_back_mask].copy()
    compare_week_reports_data = df[two_weeks_back_mask].copy()
    
    compare_week_reports_data_iqr = iqr.merge(compare_week_reports_data, on='weekday').sort_values(by=['report_datetime'], ascending=True)

    weekday_order = compare_week_reports_data_iqr['weekday'].unique()
    compare_week_reports_data_iqr['weekday'] = pd.Categorical(compare_week_reports_data_iqr['weekday'],
                                                            categories=weekday_order,
                                                            ordered=True)
    
    buf = io.BytesIO()
    
    # Plot
    plt.figure(figsize=(12, 4))

    # —Å—Ç—Ä–æ–∏–º –¥–∏–∞–ø–∞–∑–æ–Ω –Ω–æ—Ä–º—ã
    plt.fill_between(compare_week_reports_data_iqr['weekday'],
                    compare_week_reports_data_iqr['q025'],
                    compare_week_reports_data_iqr['q975'],
                    color='blue',
                    alpha=0.05,
                    label='–î–∏–∞–ø–∞–∑–æ–Ω –Ω–æ—Ä–º—ã')

    # —Å—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫ –≤—ã—Ä—É—á–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
    sns.lineplot(data=last_week_reports_data,
                x='weekday',
                y='report_revenue',
                marker='o',
                label='–¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è')

    # —Å—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫ –≤—ã—Ä—É—á–∫–∏ –∑–∞ –Ω–µ–¥–µ–ª—é —Ä–∞–Ω–µ–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π
    sns.lineplot(data=compare_week_reports_data,
                x='weekday',
                y='report_revenue',
                marker='o',
                linestyle='--',
                color='grey',
                label='–ü—Ä–µ–¥—ã–¥—É—â–∞—è –Ω–µ–¥–µ–ª—è',
                alpha=0.7)

    # –ø–æ–º–µ—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤—ã—Ä—É—á–∫–∏ –≤–æ–∑–ª–µ –∫–∞–∂–¥–æ–π —Ç–æ—á–∫–∏ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ
    for x, y in zip(last_week_reports_data['weekday'], last_week_reports_data['report_revenue']):
        plt.text(x, y+600, f'{y:.0f}', ha='center', va='bottom', fontsize=10, color='black')

    plt.title('–í—ã—Ä—É—á–∫–∞ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏', fontsize=14, pad=10)
    plt.xlabel('–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏', fontsize=12)
    plt.ylabel('–í—ã—Ä—É—á–∫–∞, —Ä—É–±.', fontsize=12)
    plt.grid(True)
    plt.legend(fontsize=8)
    plt.savefig(buf, format='png', dpi=300, bbox_inches='tight')
    buf.seek(0)
    
    image_file = {"photo": ("plot.png", buf, "image/png")}
    
    return image_file

# —Å—á–∏—Ç–∞–µ–º –≤—ã—Ä—É—á–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
def calculate_revenue_last_week(df):
    one_week_back_time = pd.Timestamp.now(pytz.timezone('Europe/Chisinau')).normalize() - timedelta(days=6)
    one_week_back_mask = df['report_datetime'] >= one_week_back_time
    last_week_reports_data = df[one_week_back_mask].copy()
    actual_revenue = last_week_reports_data.report_revenue.sum().round(2)
    return actual_revenue


# —Ä–∞—Å—á–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–π –≤—ã—Ä—É—á–∫–∏ –∑–∞ –Ω–µ–¥–µ–ª—é
def calculate_expected_revenue_last_week(df):
    return df.revenue.sum().round(2)


# —Ä–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ —á–µ–∫–∞ –∑–∞ –ø—Ä–æ—à–ª—É—é –Ω–µ–¥–µ–ª—é
def calculate_avg_receipt_last_week(df):
    one_week_back_time = pd.Timestamp.now(pytz.timezone('Europe/Chisinau')).normalize() - timedelta(days=6)
    one_week_back_mask = df['report_datetime'] >= one_week_back_time
    last_week_reports_data = df[one_week_back_mask].copy()
    return (last_week_reports_data.report_revenue.sum() / last_week_reports_data.report_purchases.sum()).round()


# —Ä–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é
def calculate_clients_number(df):
    one_week_back_time = pd.Timestamp.now(pytz.timezone('Europe/Chisinau')).normalize() - timedelta(days=6)
    one_week_back_mask = df['report_datetime'] >= one_week_back_time
    last_week_reports_data = df[one_week_back_mask].copy()
    return last_week_reports_data.report_purchases.sum()


# —Å—á–∏—Ç–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫ –∑–∞ –≤—Å–µ –Ω–µ–¥–µ–ª–∏
def calculate_avg_receipt_all_weeks(df):
    df['week_number'] = df.report_datetime.dt.strftime('%W')
    df['year'] = df.report_datetime.dt.year
    revenue_purchuses_by_weeks = df.groupby(['week_number', 'year'], as_index=False) \
                                            .agg({'report_revenue': 'sum', 'report_purchases': 'sum'})
    return (revenue_purchuses_by_weeks['report_revenue'] / revenue_purchuses_by_weeks['report_purchases']).mean().round()


# –≤—ã–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö –∏ –ø—Ä–∏–≤–æ–¥–∏–º –≤ –ø–æ—Ä—è–¥–æ–∫
transactions_query = """
SELECT t.transaction_datetime,
    t.transaction_type,
    t.transaction_product_name,
    t.transaction_product_price,
    t.product_qty,
    p.product_unit,
    t.balance_after
FROM public.transactions AS t
JOIN public.stocks AS s ON s.stock_id = t.stock_id
JOIN public.products AS p ON p.product_id = s.product_id
WHERE t.outlet_id = 5
AND t.transaction_type = 'balance'
"""
sales_data_initial = df_loading(transactions_query, 'transaction_datetime')
sales_data = df_transformation(sales_data_initial)

# —Å—á–∏—Ç–∞–µ–º —Ç–æ–ø—ã –ø—Ä–æ–¥–∞–∂ –ø–æ —Ç–æ–≤–∞—Ä–∞–º –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é –Ω–µ–¥–µ–ª—é
last_week_sales_data = df_last_week(sales_data)
top_5_cheese_by_revenue = calculate_top_5_cheese_by_revenue(last_week_sales_data)
top_5_cheese_by_qty = calculate_top_5_cheese_by_qty(last_week_sales_data)


# –≤—ã–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Ç—á–µ—Ç–∞—Ö –∏ –ø—Ä–∏–≤–æ–¥–∏–º –≤ –ø–æ—Ä—è–¥–æ–∫
reports_query = """
SELECT *
FROM public.reports
WHERE outlet_id = 5
"""
reports_data_initial = df_loading(reports_query, 'report_datetime')
reports_data_transformed = reports_transformation(reports_data_initial)


# —Ñ–æ—Ä–º–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤—ã—Ä—É—á–∫–∏ –≤ –¥–∏–Ω–∞–º–∏–∫–µ –∑–∞ –Ω–µ–¥–µ–ª—é
image_file = revenue_throughout_week(reports_data_transformed)


# –í—ã—Ä—É—á–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é
revenue_last_week = calculate_revenue_last_week(reports_data_transformed)
expected_revenue_last_week = calculate_expected_revenue_last_week(last_week_sales_data)


# —Å—á–∏—Ç–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫ –∑–∞ –ø—Ä–æ—à–ª—É—é –Ω–µ–¥–µ–ª—é
avg_receipt_last_week = calculate_avg_receipt_last_week(reports_data_transformed)
avg_receipt_all_time = calculate_avg_receipt_all_weeks(reports_data_transformed)


# –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤
clients_number = calculate_clients_number(reports_data_transformed)


# —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
message_text = create_message_text(revenue_last_week,
                                   expected_revenue_last_week,
                                   avg_receipt_last_week,
                                   avg_receipt_all_time,
                                   clients_number,
                                   top_5_cheese_by_revenue,
                                   top_5_cheese_by_qty
                                   )
